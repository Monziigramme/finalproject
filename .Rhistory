title = paste(input$property_type, "in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units"
)
)
})
}
shinyApp(ui = ui, server = server1)
https://moniquepset2.shinyapps.io/my_app/
https://moniquepset2.shinyapps.io/my_app/
setwd("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject")
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
output$ts <- renderPlotly({
ggplot(data = info()) +
geom_bar(aes(community, count_vacant, fill = community), stat = "identity", position = "dodge") +
geom_bar(aes(community, affordable_units_no, fill = community), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count of Vacant Lots",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")  # Adjust the scaling factor based on your data
) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Community Areas") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(community, affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Vacant Lots in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
output$ts <- renderPlotly({
ggplot(data = info()) +
geom_bar(aes(community, count_vacant, fill = count_vacant), stat = "identity", position = "dodge") +
geom_bar(aes(community, affordable_units_no, fill = affordable_units_no), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count of Affordable Units",
sec.axis = sec_axis(~ . / 10, name = "Vacant Lots")  # Adjust the scaling factor based on your data
) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = count_vacant, fill = count_vacant), stat = "identity") +
labs(title = paste(input$property_type, "Vacant Lots in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
output$ts <- renderPlotly({
ggplot(data = info()) +
geom_line(aes(community, count_vacant), stat = "identity") +
geom_bar(aes(community, affordable_units_no, fill = affordable_units_no), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count of Affordable Units",
sec.axis = sec_axis(~ . / 10, name = "Vacant Lots")  # Adjust the scaling factor based on your data
) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no, fill = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
server1 <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste(input$neigh, "and", input$neigh1))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
output$ts <- renderPlotly({
ggplot(data = info()) +
geom_bar(aes(x = community, y = count_vacant, fill = "Vacant Lots"), stat = "identity", position = "dodge") +
geom_bar(aes(x = community, y = affordable_units_no, fill = "Affordable Units"), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count of Vacant Lots",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")  # Adjust the scaling factor as needed
) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no, fill = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server1)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(readr)
server1 <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste(input$neigh, "and", input$neigh1))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
# Reshape data to long format for both vacant lots and affordable units
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "variable",
values_to = "count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = count, fill = variable), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")  # Adjust the scaling factor if needed
) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no, fill = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server1)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "Metrics",
values_to = "Count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = Count, fill = Metrics), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")
) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no, fill = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "Metrics",
values_to = "Count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = Count, fill = Metrics), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")
) +
scale_fill_manual(labels = c("Vacant Lots", "Affordable Housing"))
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no, fill = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "Metrics",
values_to = "Count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = Count, fill = Metrics), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")
) +
scale_fill_manual(values = c("count_vacant" = "cyan", "affordable_units_no" = "pink"),
labels = c("Vacant Lots", "Affordable Housing"))
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no, fill = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units",
fill = NULL)
)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "Metrics",
values_to = "Count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = Count, fill = Metrics), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")
) +
scale_fill_manual(values = c("count_vacant" = "cyan", "affordable_units_no" = "pink"),
labels = c("Vacant Lots", "Affordable Housing")) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
data <- read.csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
ui <- fluidPage(
titlePanel("Homelessness in Chicago: Affordable Housing vs. Vacant Lots"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "neigh",
label = "Choose a Neighbourhood",
choices = unique(data$community),
selected = "Auburn Gresham"),
selectInput(inputId = "neigh1",
label = "Choose another Neighbourhood",
choices = unique(data$community),
selected = "Rogers Park"),
selectInput(inputId = "property_type",
label = "Choose a Property Type",
choices = unique(data$property_type),
selected = "Multifamily")
),
mainPanel(
tabsetPanel(
tabPanel(title = textOutput("combined"), plotlyOutput("ts")),
tabPanel(title = textOutput("property_type_t"), plotlyOutput("ts1"))
)
)
)
)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "Metrics",
values_to = "Count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = Count, fill = Metrics), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")
) +
scale_fill_manual(values = c("count_vacant" = "cyan", "affordable_units_no" = "pink"),
labels = c("Vacant Lots", "Affordable Housing")) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='moniquepset2',
token='B5671D2BE144DDB955CED5EAE87B3803',
secret='jVHZluioFFUM05DEbmFkOo4yKp1fLdzkvU1FiBBw')
rsconnect::deployApp("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/myapp")
rsconnect::deployApp("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/myapp")
data <- read.csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
ui <- fluidPage(
titlePanel("Homelessness in Chicago: Affordable Housing vs. Vacant Lots"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "neigh",
label = "Choose a Neighbourhood",
choices = unique(data$community),
selected = "Auburn Gresham"),
selectInput(inputId = "neigh1",
label = "Choose another Neighbourhood",
choices = unique(data$community),
selected = "Rogers Park"),
selectInput(inputId = "property_type",
label = "Choose a Property Type",
choices = unique(data$property_type),
selected = "Multifamily")
),
mainPanel(
tabsetPanel(
tabPanel(title = textOutput("combined"), plotlyOutput("ts")),
tabPanel(title = textOutput("property_type_t"), plotlyOutput("ts1"))
)
)
)
)
setwd("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject")
library(shiny)
library(tidyverse)
library(plotly)
data <- read.csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
ui <- fluidPage(
titlePanel("Homelessness in Chicago: Affordable Housing vs. Vacant Lots"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "neigh",
label = "Choose a Neighbourhood",
choices = unique(data$community),
selected = "Auburn Gresham"),
selectInput(inputId = "neigh1",
label = "Choose another Neighbourhood",
choices = unique(data$community),
selected = "Rogers Park"),
selectInput(inputId = "property_type",
label = "Choose a Property Type",
choices = unique(data$property_type),
selected = "Multifamily")
),
mainPanel(
tabsetPanel(
tabPanel(title = textOutput("combined"), plotlyOutput("ts")),
tabPanel(title = textOutput("property_type_t"), plotlyOutput("ts1"))
)
)
)
)
server <- function(input, output) {
data <- read_csv("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
long_data <- reactive({
info() %>%
pivot_longer(cols = c(count_vacant, affordable_units_no),
names_to = "Metrics",
values_to = "Count")
})
output$ts <- renderPlotly({
ggplot(data = long_data()) +
geom_bar(aes(x = community, y = Count, fill = Metrics), stat = "identity", position = "dodge") +
scale_y_continuous(
name = "Count",
sec.axis = sec_axis(~ . / 10, name = "Affordable Units")
) +
scale_fill_manual(values = c("count_vacant" = "cyan", "affordable_units_no" = "pink"),
labels = c("Vacant Lots", "Affordable Housing")) +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
fill = "Metrics") +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(x = community, y = affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "Affordable Housing Units in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
