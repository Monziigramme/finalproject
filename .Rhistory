labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
affordable_housing_plot +
geom_sf(data = vacant_lots_sf, affordable_housing_plot +
geom_sf(data = vacant_lots_sf, count = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024"))
affordable_housing_plot +
geom_sf(data = vacant_lots_sf, count = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
affordable_housing_plot +
geom_sf(data = vacant_lots_sf, aes(shape = "Vacant Lots", color = count)) +
scale_color_gradient(low = 'lightblue', high = 'blue') +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
# plot chicago neighbourhoods + affordable
affordable_housing_plot <- ggplot() +
geom_sf(data = nhood_shape, size = 0.5) +
geom_sf(data = affordable_housing_count, aes(color = affordable_housing_total)) +
scale_color_gradient(low = 'lightpink', high = 'red') +
theme_minimal() +
labs(title = "Affordable Housing in Chicago Neighborhoods 2024",
color = "Total Affordable Housing") +
theme(legend.position = "right")
affordable_housing_plot
#plot vacant lot on affordable housing plot
vacant_lot_housing_plot <- affordable_housing_plot +
geom_sf(data = vacant_lots_sf, aes(shape = "Vacant Lots", color = count)) +
scale_color_gradient(low = 'lightblue', high = 'blue') +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
vacant_lot_housing_plot
#plot vacant lot on affordable housing plot
vacant_lot_housing_plot <- affordable_housing_plot +
geom_sf(data = vacant_lots_sf, color = count, aes(shape = "Vacant Lots"))
#plot vacant lot on affordable housing plot
vacant_lot_housing_plot <- affordable_housing_plot +
geom_sf(data = vacant_lots_sf, color = count, aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
vacant_lot_housing_plot
#plot vacant lot on affordable housing plot
vacant_lot_housing_plot <- affordable_housing_plot +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
vacant_lot_housing_plot
ggsave("vacant_lot_housing_plot.png", plot = vacant_lot_housing_plot, width = 6, height = 4, dpi = 300)
socioec_data_plot + vacant_lot_housing_plot
vacant_lot_housing_plot +
ggplot() +
geom_sf(data = socioec_data_sf, aes(fill = "#69b3a2"), show.legend = FALSE) +
theme_minimal() +
labs(title = "Socially Disadvantaged Neighbourhoods In Chicago")
#Importing the socioeconomic dataset for communities
socioec_data <- read.csv("Socioeconomically_Disadvantaged_Areas_20241204.csv") |>
janitor::clean_names()
setwd("C:/Users/momo_/OneDrive/Documents/GitHub/finalproject")
#Importing the socioeconomic dataset for communities
socioec_data <- read.csv("Socioeconomically_Disadvantaged_Areas_20241204.csv") |>
janitor::clean_names()
socioec_data_sf <- st_as_sf(socioec_data, wkt = "the_geom")
vacant_lot_housing_plot +
ggplot() +
geom_sf(data = socioec_data_sf, aes(fill = "#69b3a2"), show.legend = FALSE) +
theme_minimal() +
labs(title = "Socially Disadvantaged Neighbourhoods In Chicago")
affordable_housing_plot +
geom_sf(data = socioec_data_sf, aes(fill = "#69b3a2"), show.legend = FALSE) +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
#plot vacant lot on affordable housing plot
socioec_data_sf <- st_set_crs(socioec_data_sf, 4326)
affordable_housing_plot +
geom_sf(data = socioec_data_sf, aes(fill = "#69b3a2"), show.legend = FALSE) +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
affordable_housing_plot +
geom_sf(data = socioec_data_sf, aes(fill = "yellow"), show.legend = FALSE) +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
affordable_housing_plot +
geom_sf(data = socioec_data_sf, aes(fill = "yellow"), show.legend = TRUE) +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
affordable_housing_plot +
geom_sf(data = socioec_data_sf, aes(fill = "#FFFF00"), show.legend = FALSE) +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
affordable_housing_plot +
geom_sf(data = socioec_data_sf, fill = "#FFFF00", show.legend = FALSE) +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
#plot vacant lot on affordable housing plot
vacant_lot_housing_plot <- affordable_housing_plot +
geom_sf(data = vacant_lots_sf, color = "blue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
vacant_lot_housing_plot
#Importing the socioeconomic dataset for communities to see the socioeconomic status
socioec_data <- fromJSON("https://data.cityofchicago.org/resource/5kdt-irec.json") |>
janitor::clean_names()
#plot vacant lot on affordable housing plot
vacant_lot_housing_plot <- affordable_housing_plot +
geom_sf(data = vacant_lots_sf, color = "lightblue", aes(shape = "Vacant Lots")) +
scale_shape_manual(values = 15, name = NULL) +
labs(title = "Affordable Housing Units and Vacant Lots in Chicago",
subtitle = "Latest Data as of July 2024")
vacant_lot_housing_plot
ggsave("vacant_lot_housing_plot.png", plot = vacant_lot_housing_plot, width = 6, height = 4, dpi = 300)
ggsave("vacant_lot_housing_plot.png", plot = vacant_lot_housing_plot, width = 6, height = 4, dpi = 300)
View(affordable_housing_sf)
View(affordable_housing)
read.csv("Affordable_Rental_Housing_Developments_20241204 (1).csv") |>
janitor::clean_names()
View(affordable_housing)
affordable_housing_clean <- affordable_housing|>
janitor::clean_names()
View(affordable_housing_clean)
affordable_housing_clean <- affordable_housing|>
janitor::clean_names()|>
rename(Community = community.area.name) |>
select(-c(property_name, address, phone_number, management_company))
affordable_housing_clean <- affordable_housing|>
janitor::clean_names()|>
rename(Community = community_area_name) |>
select(-c(property_name, address, phone_number, management_company))
View(affordable_housing_clean)
#merge vacant lot, affordable housing, and socieconomic data
merged_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()
View(socioec_data)
#Importing the socioeconomic dataset for communities to see the socioeconomic status
socioec_data <- fromJSON("https://data.cityofchicago.org/resource/5kdt-irec.json") |>
janitor::clean_names() |>
rename(Community = community_area_name)
#merge vacant lot, affordable housing, and socieconomic data
merged_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()
View(merged_data)
#merge vacant lot, affordable housing, and socieconomic data
merged_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()|>
na.rm = TRUE
#merge vacant lot, affordable housing, and socieconomic data
merged_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()|>
na.omit()
write.csv(merged_data, "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject")
write.csv(clean_chicago_data, "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
#merge vacant lot, affordable housing, and socieconomic data
clean_chicago_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()|>
na.omit()
write.csv(clean_chicago_data, "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
View(clean_chicago_data)
affordable_housing_clean <- affordable_housing|>
janitor::clean_names()|>
rename(Community = community_area_name,
affordable_units_no = units) |>
select(-c(property_name, address, phone_number, management_company))
#I will then merge vacant lots with the community areas to match their names
vacant_lots <- left_join(chicago_data, community_area, by = "community_area") |>
filter(vacant_or_occupied == "Vacant", who_occupies == TRUE)|>
group_by(Community) |>
mutate(count_vacant = n()) |>
select(c(Community, vacant_or_occupied, who_occupies, zip_code, latitude, longitude, count_vacant))
#merge vacant lot, affordable housing, and socieconomic data
clean_chicago_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()|>
na.omit()
#Step 3: I will run a spatial regression which helps me analyze the distribution of affordable housing developments and open lots across neighborhoods.
summary(clean_chicago_data)
library(dplyr)
# Convert columns to appropriate data types
clean_chicago_data <- clean_chicago_data |>
mutate(
community = as.factor(community),
zip_code_x = as.factor(zip_code_x),
zip_code_y = as.factor(zip_code_y),
community_area_number = as.numeric(community_area_number),
property_type = as.factor(property_type),
vacant_or_occupied = as.logical(vacant_or_occupied),
percent_of_housing_crowded = as.numeric(percent_of_housing_crowded),
percent_households_below_poverty = as.numeric(percent_households_below_poverty),
percent_aged_16_unemployed = as.numeric(percent_aged_16_unemployed),
percent_aged_25_without_high_school_diploma = as.numeric(percent_aged_25_without_high_school_diploma),
percent_aged_under_18_or_over_64 = as.numeric(percent_aged_under_18_or_over_64),
per_capita_income = as.numeric(per_capita_income),
hardship_index = as.numeric(hardship_index),
count_vacant = as.numeric(count_vacant),
)
# Check the structure of the dataset after conversions
str(dataset)
# Check the structure of the dataset after conversions
str(clean_chicago_data)
write.csv(clean_chicago_data, "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
spplot(clean_chicago_data, "per_capita_income")
library(sp)
spplot(clean_chicago_data, "per_capita_income")
# Convert columns to appropriate data types
clean_chicago_data <- clean_chicago_data |>
mutate(
community = as.factor(community),
zip_code_x = as.factor(zip_code_x),
zip_code_y = as.factor(zip_code_y),
community_area_number = as.numeric(community_area_number),
property_type = as.factor(property_type),
vacant_or_occupied = as.logical(vacant_or_occupied),
percent_of_housing_crowded = as.numeric(percent_of_housing_crowded),
percent_households_below_poverty = as.numeric(percent_households_below_poverty),
percent_aged_16_unemployed = as.numeric(percent_aged_16_unemployed),
percent_aged_25_without_high_school_diploma = as.numeric(percent_aged_25_without_high_school_diploma),
percent_aged_under_18_or_over_64 = as.numeric(percent_aged_under_18_or_over_64),
per_capita_income = as.numeric(per_capita_income),
hardship_index = as.numeric(hardship_index),
count_vacant = as.numeric(count_vacant),
latitude_x = as.numeric(latitude_x),
longitude_x = as.numeric(longitude_x),
latitude_y = as.numeric(latitude_y),
longitude_y = as.numeric(longitude_y)
)
# Check the structure of the dataset after conversions
str(clean_chicago_data)
#merge vacant lot, affordable housing, and socioeconomic data
clean_chicago_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()|>
select(-c(vacant_or_occupied, who_occupies, location, x_coordinate, y_coordinate, zip_code_y, zip_code_x, latitude_y,
longitude_y))|>
na.omit()
#merge vacant lot, affordable housing, and socioeconomic data
clean_chicago_data <- socioec_data |>
left_join(vacant_lots, by = "Community") |>
left_join(affordable_housing_clean, by = "Community") |>
janitor::clean_names()|>
select(-c(vacant_or_occupied, who_occupies, location, x_coordinate, y_coordinate, zip_code_y, zip_code_x, latitude_y,
longitude_y, ca))|>
na.omit()
summary(clean_chicago_data)
# Convert columns to appropriate data types
clean_chicago_data <- clean_chicago_data |>
mutate(
community = as.factor(community),
community_area_number = as.numeric(community_area_number),
property_type = as.factor(property_type),
percent_of_housing_crowded = as.numeric(percent_of_housing_crowded),
percent_households_below_poverty = as.numeric(percent_households_below_poverty),
percent_aged_16_unemployed = as.numeric(percent_aged_16_unemployed),
percent_aged_25_without_high_school_diploma = as.numeric(percent_aged_25_without_high_school_diploma),
percent_aged_under_18_or_over_64 = as.numeric(percent_aged_under_18_or_over_64),
per_capita_income = as.numeric(per_capita_income),
hardship_index = as.numeric(hardship_index),
count_vacant = as.numeric(count_vacant),
latitude_x = as.numeric(latitude_x),
longitude_x = as.numeric(longitude_x)
)
#Check the structure of the dataset after conversions
str(clean_chicago_data)
spplot(clean_chicago_data, "per_capita_income")
library(spdep)
install.packages("spdep")
library(spdep)
write.csv(clean_chicago_data, "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
queen.nb = poly2nb(clean_chicago_data)
#for regression
clean_chicago_sf <- st_as_sf(clean_chicago_data, coords = c("longitude_x", "latitude_x"), crs = 4326)
queen.nb = poly2nb(clean_chicago_sf)
st_geometry_type(clean_chicago_sf)
queen.nb = poly2nb(nhood_shape)
clean_chicago_sf <- st_join(nhood_shape, clean_chicago_sf)
queen.nb = poly2nb(clean_chicago_sf)
rook.nb = poly2nb(clean_chicago_sf, queen = FALSE)
queen.nb <- poly2nb(clean_chicago_sf)
rook.nb <- poly2nb(clean_chicago_sf, queen = FALSE)
#convert to listw type
queen.listw <- nb2listw(queen.nb)
rook.listw <- nb2listw(rook.nb)
#we will define our regression equation with dependent variable being number of
#open lots and independent variables being Neighborhood characteristics (hardship index, population density, land use types)
sp_reg <- count_vacant ~ property_type + percent_of_housing_crowded + percent_aged_16_unemployed + percent_aged_25_without_high_school_diploma + percent_aged_under_18_or_over_64 + per_capita_income + hardship_index
regress <- lm(sp_reg, data = clean_chicago_sf)
summary(regress)
options(scipen = 7)
regress <- lm(sp_reg, data = clean_chicago_sf)
summary(regress)
View(clean_chicago_sf)
#we will define our regression equation with dependent variable being number of
#open lots and independent variables being Neighborhood characteristics (hardship index, population density, land use types)
sp_reg <- affordable_units_no ~ property_type + percent_of_housing_crowded + percent_aged_16_unemployed + percent_aged_25_without_high_school_diploma + percent_aged_under_18_or_over_64 + per_capita_income + hardship_index
options(scipen = 7)
regress <- lm(sp_reg, data = clean_chicago_sf)
summary(regress)
install.packages("rgdal")
library("rgdal")
#Get the coordinates for creating spatial neighbors
coords <- st_coordinates(clean_chicago_sf)
#Use k-nearest neighbors (e.g., 4 nearest neighbors)
nb <- knn2nb(knearneigh(coords, k = 4))
View(coords)
duplicated_coords <- duplicated(coords)
sum(duplicated_coords)
coords_unique <- coords[!duplicated(coords), ]
coords <- st_coordinates(merged_sf)[, c("X", "Y")] #to ensure there are only two columns
#Get the coordinates for creating spatial neighbors
coords <- st_coordinates(clean_chicago_sf)[, c("X", "Y")] #to ensure there are only two columns
duplicated_coords <- duplicated(coords)
sum(duplicated_coords)
coords_unique <- coords[!duplicated(coords), ]
#Use k-nearest neighbors (e.g., 4 nearest neighbors)
nb <- knn2nb(knearneigh(coords, k = 4))
#Use k-nearest neighbors (e.g., 4 nearest neighbors)
nb <- knn2nb(knearneigh(coords_unique, k = 4))
# Convert to a listw (weights list) object
weights <- nb2listw(nb, style = "W")
# Compute Moran's I to check for spatial autocorrelation
moran.test(merged_sf$affordable_units_no, listw = weights)
# Compute Moran's I to check for spatial autocorrelation
moran.test(clean_chicago_sf$affordable_units_no, listw = weights)
sum(is.na(clean_chicago_sf$affordable_units_no))
# Convert columns to appropriate data types
clean_chicago_data <- clean_chicago_data |>
mutate(
community = as.factor(community),
community_area_number = as.numeric(community_area_number),
property_type = as.factor(property_type),
percent_of_housing_crowded = as.numeric(percent_of_housing_crowded),
percent_households_below_poverty = as.numeric(percent_households_below_poverty),
percent_aged_16_unemployed = as.numeric(percent_aged_16_unemployed),
percent_aged_25_without_high_school_diploma = as.numeric(percent_aged_25_without_high_school_diploma),
percent_aged_under_18_or_over_64 = as.numeric(percent_aged_under_18_or_over_64),
per_capita_income = as.numeric(per_capita_income),
hardship_index = as.numeric(hardship_index),
count_vacant = as.numeric(count_vacant),
latitude_x = as.numeric(latitude_x),
longitude_x = as.numeric(longitude_x)
) |>
na.omit()
sum(is.na(clean_chicago_sf$affordable_units_no))
#Check the structure of the dataset after conversions
str(clean_chicago_data)
write.csv(clean_chicago_data, "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject/clean_chicago_data.csv")
#for regression
clean_chicago_sf <- st_as_sf(clean_chicago_data, coords = c("longitude_x", "latitude_x"), crs = 4326)
clean_chicago_sf <- st_join(nhood_shape, clean_chicago_sf)
# Compute Moran's I to check for spatial autocorrelation
moran.test(clean_chicago_sf$affordable_units_no, listw = weights)
weights
View(clean_chicago_data)
sum(is.na(clean_chicago_sf$affordable_units_no))
sum(is.na(clean_chicago_data$affordable_units_no))
st_join(nhood_shape, clean_chicago_sf, na.rm = TRUE)
na.omit(clean_chicago_sf)
clean_chicago_sf <- na.omit(clean_chicago_sf)
#Get the coordinates for creating spatial neighbors
coords <- st_coordinates(clean_chicago_sf)[, c("X", "Y")] #to ensure there are only two columns
duplicated_coords <- duplicated(coords)
sum(duplicated_coords)
coords_unique <- coords[!duplicated(coords), ]
#Use k-nearest neighbors (e.g., 4 nearest neighbors)
nb <- knn2nb(knearneigh(coords_unique, k = 4))
# Convert to a listw (weights list) object
weights <- nb2listw(nb, style = "W")
# Compute Moran's I to check for spatial autocorrelation
moran.test(clean_chicago_sf$affordable_units_no, listw = weights)
nb <- knn2nb(knearneigh(coords_unique, k = 8))
weights <- nb2listw(nb, style = "W")
moran.test(clean_chicago_sf$affordable_units_no, listw = weights)
nb <- dnearneigh(coords_unique, 0, 4)
weights <- nb2listw(nb, style = "W")
moran.test(clean_chicago_sf$affordable_units_no, listw = weights)
regress <- lmSLX(sp_reg, data = clean_chicago_sf, queen.listw)
install.packages("spatialreg")
library(spatialreg)
regress <- lmSLX(sp_reg, data = clean_chicago_sf, queen.listw)
clean_chicago_sf <- st_join(nhood_shape, clean_chicago_sf, na.rm = TRUE)
clean_chicago_sf <- st_join(nhood_shape, clean_chicago_sf)
regress <- lmSLX(sp_reg, data = clean_chicago_sf, queen.listw)
View(queen.listw)
#Get the coordinates for creating spatial neighbors
coords <- st_coordinates(clean_chicago_sf)[, c("X", "Y")] #to ensure there are only two columns
#Use k-nearest neighbors (e.g., 4 nearest neighbors)
nb <- knn2nb(knearneigh(coords, k = 4))
#Question 2
library(shiny)
library(tidyverse)
library(plotly)
data <- read.csv("clean_chicago_data.csv")
View(data)
ggplot(data = info()) +
geom_histogram(aes(count_vacant, affordable_units_no, fill = community), stat = "identity") +
labs(title = paste("Vacant Lots and Affordable Units in", input$neigh, "and", input$neigh1),
y = "Count",
fill = "Community Areas") +
theme(axis.text.x = element_text(angle=45, vjust=.5, hjust=1))
ui <- fluidPage(
titlePanel("Homelessness in Chicago: Affordable Housing vs. Vacant Lots"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "neigh",
label = "Choose a Neighbourhood",
choices = unique(data$community),
selected = "Auburn Gresham"),
selectInput(inputId = "neigh1",
label = "Choose another Neighbourhood",
choices = unique(data$community),
selected = "Rogers Park"),
selectInput(inputId = "property_type",
label = "Choose a Property Type",
choices = unique(data$property_type),
selected = "Multifamily")
),
mainPanel(
tabsetPanel(
tabPanel(title = textOutput("combined"), plotlyOutput("ts")),
tabPanel(title = textOutput("property_type_t"), plotlyOutput("ts1"))
)
)
)
)
server <- function(input, output) {
path <- "C:/Users/momo_/OneDrive/Documents/GitHub/problem-set-2-Monziigramme"
data <- read_csv("data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
output$ts <- renderPlotly({
ggplotly(ggplot(data = info()) +
geom_histogram(aes(community, count_vacant, fill = community), stat = "identity") +
labs(title = paste("Vacant Lots in", input$neigh, "and", input$neigh1),
y = "Count",
fill = "Community Areas") +
theme(axis.text.x = element_text(angle=45, vjust=.5, hjust=1))
)
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(community, affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
server <- function(input, output) {
path <- "C:/Users/momo_/OneDrive/Documents/GitHub/finalproject"
data <- read_csv("clean_chicago_data.csv")
output$combined <- renderText(paste({input$neigh}, "and", {input$neigh1}))
output$property_type_t <- renderText({input$property_type})
info <- reactive({
filter(data, community == input$neigh | community == input$neigh1)
})
info1 <- reactive({
filter(data, property_type == input$property_type & (community == input$neigh | community == input$neigh1))
})
output$ts <- renderPlotly({
ggplotly(ggplot(data = info()) +
geom_histogram(aes(community, count_vacant, fill = community), stat = "identity") +
labs(title = paste("Vacant Lots in", input$neigh, "and", input$neigh1),
y = "Count",
fill = "Community Areas") +
theme(axis.text.x = element_text(angle=45, vjust=.5, hjust=1))
)
})
output$ts1 <- renderPlotly({
ggplotly(ggplot(data = info1()) +
geom_bar(aes(community, affordable_units_no), stat = "identity") +
labs(title = paste(input$property_type, "in", input$neigh, "and", input$neigh1),
x = "Community Areas",
y = "Total Number of Affordable Units")
)
})
}
shinyApp(ui = ui, server = server)
